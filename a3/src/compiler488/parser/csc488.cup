// Package and import specifications section.

package compiler488.parser;

import java_cup.runtime.*;		// Must always import this.

import compiler488.ast.decl.*;
import compiler488.ast.expn.*;
import compiler488.ast.stmt.*;
import compiler488.ast.type.*;
import compiler488.ast.ASTList;
import compiler488.ast.Readable;
import compiler488.ast.Printable;


//import compiler488.ast.decl.RoutineDecl;
//import compiler488.ast.decl.ScalarDecl;

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes HERE
//:};

/* User code components 2: parser code components. 
 * Modifications to the default generated parser
 */
parser code {:

	String lastError;
	
	/* Override the report_error method so it will display the line and
	 * column of where the error occurred in the input as well as the
	 * reason for the error which is passed into the method in the
	 * String 'message'.
	 * @param message  error message to print
	 * @param info	 symbol containing line/column numbers
	 */
	public void report_error(String message, Object info)
	{
	String st =  "Error";
   
		if (info instanceof java_cup.runtime.Symbol)
		{
			java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

		/* s.left is supposed to hold the line number of the error.
		 * s.right is supposed to hold the column number.
			 * If either is < 0 the parser may have run off the end of the program
			 * and a Syntax Error message without line number may be printed.
		 */
   
			if (s.left >= 0)				// Check line number.
			{
				st += " in line " + (s.left + 1);
				if (s.right >= 0)			// Check column number.
					st += ", column " + (s.right + 1);
			}
			else
			   st += " at end of input " ;
		}
		st += ": " + message;
		System.err.println (st);
		lastError = st;
	}
   
	// Override the report_fatal_error method to use the report_error method.
	/** @throws SyntaxErrorException						*/
	public void report_fatal_error (String message, Object info) throws SyntaxErrorException
	{
		report_error (message, info);
		throw new SyntaxErrorException (lastError);
	}
   
	// version string for printing version in Main
	public static final String version = "Winter 2017" ;

:};

/* User code components 3: initialization code.
 * If you want some code to be executed before the parser asks for the first
 * token, add it here.
 */
init with {:
:};

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :};

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2017 

// Terminals returned by the scanner with no value attached.  
terminal	AND,	OR,	NOT,	TRUE,	FALSE	;
terminal 	BOOLEAN,INTEGER,FUNCTION,PROCEDURE	;
terminal	DO,	ELSE,	EXIT,   IF	;
terminal	READ, 	REPEAT,	RETURN,	NEWLINE,THEN,	UNTIL	;
terminal	VAR,	WHEN,	WHILE,	WITHX,	WRITE 	;

// Special-character terminals, no value attached
terminal	L_PAREN	,R_PAREN,L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY	;
terminal	EQUAL,	GREATER,LESS,	COMMA,  DOT, QUESTION, COLON	;
terminal	PLUS,	MINUS,	TIMES,  DIVIDE	;

// Terminals returned by the scanner with a value.
terminal String  IDENT	;
terminal Integer INTCONST	;
terminal String  TEXTCONST	;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal	Program program;
nonterminal Stmt statement;
nonterminal Declaration declaration;
nonterminal Scope scope;
nonterminal	ASTList<Stmt> statements;
nonterminal	ASTList<Declaration> declarations;
nonterminal	Stmt matchedStatement;
nonterminal Stmt unmatchedStatement;
nonterminal	ASTList<DeclarationPart> variablenames;
nonterminal Expn output;
nonterminal	Type type;
nonterminal ASTList<Expn> arguments;
nonterminal ASTList<ScalarDecl> parameters;
nonterminal Expn variable; 
nonterminal Expn expression;
nonterminal DeclarationPart variablename;

nonterminal	ASTList<Readable> inputs;
nonterminal ASTList<Printable> outputs;
nonterminal Integer bound ;
nonterminal	ProcedureCallStmt procedureCall;
nonterminal ScalarDecl parameter;
nonterminal Expn conjunction, negation, compareExpn ;
nonterminal	Expn arithExpn, term, factor, primary;
nonterminal ConstExpn constant ;

// Non-terminals that have a value.
// nonterminal type  nameList ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence left PLUS, MINUS;
//precedence left TIMES, DIVIDE;		// Higher precedence.
precedence   left ELSE ;

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */

program		::=	scope:s	{: RESULT = new Program(s.getDeclarations(), s.getStatements()); :}	;				// the main program

scope		::=	L_CURLEY  declarations:d statements:s  R_CURLEY  	// scope with declarations and statements
		{:	RESULT = new Scope(d, s); :}
		
		|	L_CURLEY statements:s  R_CURLEY 		// scope with statments only
		{:	RESULT = new Scope(s); :}

		|	L_CURLEY  R_CURLEY			// empty scope
		{:	RESULT = new Scope(); :}
		;

statements	::=	statement:s						// sequence of statements
		{:	RESULT = new ASTList<Stmt>(s); :}
		|	statements:ss statement:s
		{:	RESULT = ss.addLast(s);  :}
		;

declarations	::=	declaration:d					// sequence of declarations
		{:	RESULT = new ASTList<Declaration>(d); :}
		
		|	declarations:ds declaration:d
		{:	RESULT = ds.addLast(d);  :}
		;

statement	::=	matchedStatement:m
		{:	RESULT = m; :}
		
		|	unmatchedStatement:u
		{:	RESULT = u; :}

		;

matchedStatement::=	variable:v COLON EQUAL expression:e				// assignment statement
		{:	RESULT = new AssignStmt(v, e); :}
		
		|	IF expression:e THEN matchedStatement:m ELSE matchedStatement:u // if statements
		{:	RESULT = new IfStmt(e, m, u); :}

		|	WHILE expression:expr DO statement:body				// while statement
		{:	RESULT = new WhileDoStmt(body, expr); :}
		
		|	REPEAT statement:body  UNTIL expression:expr			// repeat statement
		{:	RESULT = new RepeatUntilStmt(body, expr); :}
		
		|	EXIT							// exit statements
		{:	RESULT = new ExitStmt(); :}

		|	EXIT INTCONST:level
		{:	RESULT = new ExitStmt(level); :}

		|	EXIT WHEN expression:e
		{:	RESULT = new ExitStmt(e); :}

		|	EXIT INTCONST:level WHEN expression:e
		{:	RESULT = new ExitStmt(level, e); :}
		
		|	RETURN WITHX  expression:e
		{:	RESULT = new ReturnStmt(e); :}
		
		|	RETURN 							// return statements
		{:	RESULT = new ReturnStmt(); :}
		
		|	WRITE outputs:o						// input/output statments
		{:	RESULT = new WriteStmt(o); :}
		
		|	READ  inputs:i
		{:	RESULT = new ReadStmt(i); :}
		
		|	procedureCall:p						// procedure call
		{:	RESULT = p; :}
		
		|	scope:s							// embedded scope
		{:	RESULT = s; :}

		;

unmatchedStatement::=	IF expression:e THEN statement:s
		{:	RESULT = new IfStmt(e, s); :}
		
		|	IF expression:e THEN matchedStatement:m ELSE unmatchedStatement:u
		{:	RESULT = new IfStmt(e, m, u); :}
		;

procedureCall	::=	IDENT:i 							// call procedure with no parameters
		{:	RESULT = new ProcedureCallStmt(i); :}

		|	IDENT:i L_PAREN arguments:as R_PAREN  			// call procedure with parameters
		{:	RESULT = new ProcedureCallStmt(i, as); :}

		;

declaration	::=	VAR variablenames:v COLON type:t			// declare scalar/array variables
		{:  RESULT = new MultiDeclarations(v, t); :}
		
		|	FUNCTION IDENT:i COLON type:t scope:s			// declare function
		{:	RoutineBody routineBody = new RoutineBody(s);
			RESULT = new RoutineDecl(i, routineBody, t); :}
		
		|	FUNCTION  IDENT:i L_PAREN parameters:p R_PAREN COLON type:t scope:s
		{:	RoutineBody routineBody = new RoutineBody(p, s);
			RESULT = new RoutineDecl(i, routineBody, t); :}
		
		|	PROCEDURE IDENT:i scope:s			//  declare procedure
		{:	RoutineBody routineBody = new RoutineBody(s);
			RESULT = new RoutineDecl(i, routineBody); :}
		
		|	PROCEDURE IDENT:i L_PAREN parameters:p R_PAREN scope:s
		{:	RoutineBody routineBody = new RoutineBody(p, s);
			RESULT = new RoutineDecl(i, routineBody); :}
		;

variablenames	::=	variablename:v  				// list of variables being declared
		{:	RESULT = new ASTList<DeclarationPart>(v); :}
		
		|	variablenames:vs COMMA variablename:v
		{:	RESULT = vs.addLast(v);  // vs is an ASTList of DeclarationPart
			:}
		;

variablename	::=	IDENT:i 						// scalar variable
		{:	RESULT = new ScalarDeclPart(i); :}
		
		|	IDENT:i L_SQUARE INTCONST:ub R_SQUARE		// array variable with upper bound
		{:	RESULT = new ArrayDeclPart(i, ub); :}
		
		|	IDENT:i L_SQUARE bound:lb DOT DOT bound:ub  R_SQUARE	// array variable with upper/lower bounds
		{:	RESULT = new ArrayDeclPart(i, lb, ub); :}
		;

bound		::=	INTCONST:b					// positive array bound
		{:	RESULT = b; :}
		
		|	MINUS INTCONST:b					// negative array bound
		{:	RESULT = -b; :}
		;

type		::=	INTEGER			// integer type
		{:	RESULT = new IntegerType(); :}
		
		|	BOOLEAN			// boolean type
		{:	RESULT = new BooleanType(); :}

		;

outputs		::=	output:o			// list of output expressions
		{:	RESULT = new ASTList<Printable>(o); :}
		
		|	outputs:os COMMA output:o
		{:	RESULT = os.addLast(o);  // os is an ASTList of Printable
			:}
		;

output		::=	expression:e		// integer expression
		{:	RESULT = e; :}
		
		|	TEXTCONST:t		// text constant
		{:	RESULT = new TextConstExpn(t); :}
		
		|	NEWLINE			// newline constant
		{:	RESULT = new SkipConstExpn(); :}
		;

inputs		::=	variable:v		// list of variables being read into
		{:	RESULT = new ASTList<Readable>((Readable)v); :}
		
		|	inputs:is COMMA variable:v
		{:	RESULT = is.addLast((Readable)v);  // is is an ASTList of Readable
			:}
		;

arguments	::=	expression:e			// list of function/procedure arguments
		{:	RESULT = new ASTList<Expn>(e); :}
		
		|	arguments:as COMMA expression:e
		{:	RESULT = as.addLast(e);  // as is an ASTList of Expn
			:}
		;

parameters	::=	parameter:p			// list of function/procedure formal parameters
		{:	RESULT = new ASTList<ScalarDecl>(p); :}
		
		|	parameters:ps COMMA parameter:p
		{:	RESULT = ps.addLast(p);  // ps is an ASTList of ScalarDecl
			:}

		;

parameter	::=	IDENT:i COLON type:t 		// declare one parameter
		{:	RESULT = new ScalarDecl(t, i); :}
		;

expression	::=	conjunction:c			// disjunctions, associate left-to-right
		{:	RESULT = c; :}
		
		|	expression:e OR conjunction:c
		{:	RESULT = new BoolExpn(e, c, "or"); :}
		;

conjunction	::=	negation:n			// conjunctions, associate left-to-right
		{:	RESULT = n; :}
		
		|	conjunction:c AND negation:n
		{:	RESULT = new BoolExpn(c, n, "and"); :}
		;

negation	::=	compareExpn:c 			// negations
		{:	RESULT = c; :}
		
		|	NOT negation:n
		{:	RESULT = new NotExpn(n); :}
		;

compareExpn	::=	arithExpn:a			// comparisons, do not associate
		{:	RESULT = a; :}
		
		|	arithExpn:left EQUAL arithExpn:right
		{:	RESULT = new EqualsExpn(left, right, "="); :}

		| 	arithExpn:left NOT EQUAL arithExpn:right
		{:	RESULT = new EqualsExpn(left, right, "!="); :}

		|	arithExpn:left LESS arithExpn:right
		{:	RESULT = new CompareExpn(left, right, "<"); :}

		|	arithExpn:left LESS EQUAL arithExpn:right
		{:	RESULT = new CompareExpn(left, right, "<="); :}
		
		|	arithExpn:left GREATER arithExpn:right
		{:	RESULT = new CompareExpn(left, right, ">"); :}
		
		|	arithExpn:left GREATER EQUAL arithExpn:right
		{:	RESULT = new CompareExpn(left, right, ">="); :}
		;

arithExpn	::=	term:t				// expressions, associate + , - left-to-right
		{:	RESULT = t; :}

		|	arithExpn:a  PLUS  term:t
		{:	RESULT = new ArithExpn(a, t, "+"); :}
		
		|	arithExpn:a  MINUS term:t
		{:	RESULT = new ArithExpn(a, t, "-"); :}
		;

term		::=	factor:f				// terms, associate * , /   left-to-right
		{:	RESULT = f; :}

		|	term:t TIMES factor:f
		{:	RESULT = new ArithExpn(t, f, "*"); :}

		|	term:t DIVIDE factor:f
		{:	RESULT = new ArithExpn(t, f, "/"); :}
		;

factor		::=	primary:p				// unary minus
		{:	RESULT = p; :}
		
		|	MINUS factor:f
		{:	RESULT = new UnaryMinusExpn(f); :}
		;

primary		::=	constant:c				// integer or boolean constant
		{:	RESULT = c; :}
		
		|	variable:v				// scalar, array variable or function call
		{:	RESULT = v; :}
		
		|	IDENT:i L_PAREN arguments:a R_PAREN 	// function call
		{:	RESULT = new FunctionCallExpn(i, a); :}
		
		| 	L_PAREN  expression:e  R_PAREN		// parenthesized expression
		{:	RESULT = e; :} // TODO: does this work with BEDMAS?
		
		|	L_PAREN  expression:cond QUESTION expression:iftrue COLON expression:iffalse R_PAREN
		{:	RESULT = new ConditionalExpn(cond, iftrue, iffalse); :}
		;

constant	::=	INTCONST:n	// integer constant
		{:	RESULT = new IntConstExpn(n); :}
		
		|	TRUE		// constant true
		{:	RESULT = new BoolConstExpn(true); :}
		
		|	FALSE		// constant false
		{:	RESULT = new BoolConstExpn(false); :}
		;

variable	::=	IDENT:i 					// scalar variable or function call
		{:	RESULT = new IdentExpn(i); :}
		
		|	IDENT:i L_SQUARE expression:e R_SQUARE 	// element of an array
		{:	RESULT = new SubsExpn(i, e); :}
		;


