Design:
We designed the grammar by first inputting the grammar directly from the
language reference, then resolving each shift/reduce conflict produced
from the CUP parser generator. Here is a list of conflicts that arose
and how we fixed them:

  statement: dangling else
  We get a shift/reduce conflict because of the dangling else problem for
  the recursive statement rules (ifthen, ifthenelse, while, repeat). We
  fixed this in the standard way: by dividing statements into matched or
  unmatched statements, where unmatched statements which has at least one if 
  or repeat that is not paired with a following else or until, and matched statements
  have no unpaired if/repeats, or no if/repeats at all (the non recursive
  statement rules). We then only allow matched statements between an if/else,
  or repeat/until, which means that each else or until is matched with the nearest
  preceding pair.

  expression: two sources of recursion
  many of the production rules for expression include two more expressions in the
  RHS (e.g. E -> E + E). This leads to a shift reduce conflict, since the parser
  doesn't know whether to reduce the current E or shift for the next one. We 
  fixed this conflict by rewriting the grammar so that there is only one E in
  the RHS of each production rule, by replacing one of the Es with a nonterminal
  which leads to all of the non recursive expressions (which we call value).
  We replace specifically the left expression with this new non terminal since
  otherwise this leads to a shift/reduce conflict with the unary NOT expression
  rule.

  nonterminal COMMA nonterminal:
  many non terminals have a production rule of the form:
    A -> A comma A
  which is a similar conflict as expression, and is fixed in a similar way
  (by replacing one of recursive non terminals).

  variable/array/function/parameter/procedurename:
  we get a reduce/reduce conflict, since these are all defined as IDENT and
  the parser is unable to determine which type of name to reduce to. To get
  around this, we just removed all of these non terminals and used IDENT
  directly


Testing:
We included our a1 programs as passing tests, and mistakes from a1 as 
failing tests. We also added a number of extra tests - the purpose of each
test is described in comments at the top of each file

Who did what:

Jeffrey
    - Assisted in solving debug conflicts
    - Assisted in translating language specifications to productions
    - Wrote script to run test cases
    - Added A2b as passing test case

Atheed
    - Helped translate language specifications to productions
    - Fixed and added A2a as passing test case
    - Wrote several failing test cases

Evan 
    - Helped with translating language specifications to productions
    - Fixed syntax errors in A2d and added it as passing test case
    - Added many failing test cases

